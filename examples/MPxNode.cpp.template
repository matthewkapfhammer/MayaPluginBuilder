/*
// ==========================================================================
// Copyright ${year} ${author}
//
// ==========================================================================
*/

#include <string.h>
#include <maya/MIOStream.h>
#include <math.h>

#include <maya/MPxNode.h> 

#include <maya/MFnNumericAttribute.h>
#include <maya/MFnPlugin.h>

#include <maya/MString.h> 
#include <maya/MTypeId.h> 
#include <maya/MPlug.h>
#include <maya/MVector.h>
#include <maya/MDataBlock.h>
#include <maya/MDataHandle.h>
 
class ${className} : public MPxNode
{
public:
						${className}();
	virtual				~${className}(); 

	virtual MStatus		compute( const MPlug& plug, MDataBlock& data );

	static  void*		creator();
	static  MStatus		initialize();

public:
	static  MObject		input;         // The input value.
	static  MObject		output;        // The output value.
	static	MTypeId		id;
};

MTypeId ${className}::id( ${plugin_id} );
MObject ${className}::input;        
MObject ${className}::output;       

${className}::${className}() {}
${className}::~${className}() {}

MStatus ${className}::compute( const MPlug& plug, MDataBlock& data )
{
	MStatus returnStatus;
 
	if( plug == output ) {
		MDataHandle inputData = data.inputValue( input, &returnStatus );

		if( returnStatus != MS::kSuccess )
			cerr << "ERROR getting data" << endl;
		else {
			float result = inputData.asFloat() * 2.0f;

			MDataHandle outputHandle = data.outputValue( sine::output );
			outputHandle.set( result );
			data.setClean(plug);
		}
	} 

	else {
		return MS::kUnknownParameter;
	}

	return MS::kSuccess;
}

void* ${className}::creator()
{
	return new ${className}();
}

MStatus ${className}::initialize()
{
	MFnNumericAttribute nAttr;
	MStatus	stat;

	input = nAttr.create( "input", "in", MFnNumericData::kFloat, 0.0 );
	nAttr.setStorable(true);

	output = nAttr.create( "output", "out", MFnNumericData::kFloat, 0.0 );
	nAttr.setWritable(false);
	nAttr.setStorable(false);

	// We could remove the checks here; they basically never fail
	stat = addAttribute( input );
		if (!stat) { stat.perror("addAttribute"); return stat;}
	stat = addAttribute( output );
		if (!stat) { stat.perror("addAttribute"); return stat;}

	// in the plugin, make a line for each attribute and let the user 
	// decide which ones to keep?  Or just leave a comment?
	stat = attributeAffects( input, output );
		if (!stat) { stat.perror("attributeAffects"); return stat;}

	return MS::kSuccess;
}

MStatus initializePlugin( MObject obj )
{ 
	MStatus   status;
	MFnPlugin plugin( obj, "${author}", "${version}", "Any");

	status = plugin.registerNode( "${className}", ${className}::id, ${className}::creator,
								  ${className}::initialize );
	if (!status) {
		status.perror("registerNode");
		return status;
	}

	return status;
}

MStatus uninitializePlugin( MObject obj)
{
	MStatus   status;
	MFnPlugin plugin( obj );

	status = plugin.deregisterNode( ${className}::id );
	if (!status) {
		status.perror("deregisterNode");
		return status;
	}

	return status;
}


